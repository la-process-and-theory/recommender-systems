interest <- read.csv('interest.csv')
difficulty <- read.csv('difficulty.csv')
View(difficulty)
View(difficulty)
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
interest <- read.csv('interest.csv')
difficulty <- read.csv('difficulty.csv')
?unite
colnames(interest)
#Data cleaning
#Unite
unite(interest, col = 'name', .data$first, .data$last)
#Finding duplicates
interest %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Finding duplicates
interest2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Data cleaning
#Unite
interest2 <- unite(interest, col = 'name', .data$first, .data$last)
#Finding duplicates
interest2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
?aggregate
View(interest)
View(interest)
View(interest2)
View(interest2)
interest2 %>% group_by(.data$name) %>% summarise(mean())
interest2 %>% group_by(.data$name) %>% summarise(mean(.data$prediction.interest))
#interest2 %>% group_by(.data$name) %>% summarise(mean(.data$prediction.interest))
aggregate(x = interest2, by = name, FUN = mean())
#interest2 %>% group_by(.data$name) %>% summarise(mean(.data$prediction.interest))
aggregate(interest2, by = name, FUN = mean())
#interest2 %>% group_by(.data$name) %>% summarise(mean(.data$prediction.interest))
aggregate(interest2, by = name, FUN = mean)
#interest2 %>% group_by(.data$name) %>% summarise(mean(.data$prediction.interest))
aggregate(interest2, by = interest2$name, FUN = mean)
?summarise_all
interest2 %>% group_by(.data$name) %>% summarise_all(.funs = mean)
#rownames
rownames(interest2) <- interest2$name
?rownames
#rownames
columns_to_rownames(interest2, var = "name")
#rownames
column_to_rownames(interest2, var = "name")
interest2
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding duplicates
interest2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
interest2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
#Dealing with duplicates - average duplicates
interest2 <- interest2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
interest2
anyNA(interest2)
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
interest <- read.csv('interest.csv')
difficulty <- read.csv('difficulty.csv')
#Data cleaning
clean_similarity <- function(df) {
#Unite
df <- unite(df, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df <- df %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
#Dealing with NAs - use the mean (see below)
if (anyNA(df)) {
means <- map(df, mean, na.rm = TRUE)
df <- replace_na(df, means)
}
df
}
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df, transpose = FALSE) {
#tibble::column_to_rownames() to preserve names
df1 <- column_to_rownames(df, var = "name") %>% as.matrix()
if (transpose == TRUE) {
df1 <- t(df1)
}
return(df1)
}
#Clean interest df
interest2 <- clean_similarity(interest)
#Make interest similarity matrix input
#let's transpose the matrix so that multiplication occurs by students rather than units.
I2 <- make_similarity_matrix_input(interest2, transpose = TRUE)
#Then we can generate the cosine similarity values for each pair of students
I.SIM <- lsa::cosine(I2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
diag(I.SIM) <- NA #Since each student will be most similar to themselves we want to remove that information
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
head(rownames(I.SIM[order(I.SIM[my.name,], decreasing = TRUE),]), n = 5) #This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of students
D.SIM <- lsa::cosine(D2) #This command generates the cosine similarity values as a new matrix.
diag(D.SIM) <- NA #Since each unit will be exactly similar to themselves (cosine similarity of 1) we want to remove that information
unit.name <- "prediction.difficulty" #Input chosen unit name as it appears in the data set
head(rownames(D.SIM[order(D.SIM[unit.name, ], decreasing = TRUE),]), n = 5)#This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
get_similarity(my.name, I.SIM)
#Now, we can make a quick query to find out which entries are most similar to a given entry. Of course we're creating a function for this.
get_similarity <- function(entry, sim_matrix) {
diag(sim_matrix) <- NA #Since each student will be most similar to themselves we want to remove that information
#This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
head(rownames(sim_matrix[order(sim_matrix[entry,], decreasing = TRUE),]), n = 5)
}
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
get_similarity(my.name, I.SIM)
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of units
D.SIM <- lsa::cosine(D2) #This command generates the cosine similarity values as a new matrix.
unit.name <- "prediction.difficulty" #Input chosen unit name as it appears in the data set
get_similarity(unit.name, D.SIM)
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of units
D.SIM <- lsa::cosine(D2) #This command generates the cosine similarity values as a new matrix.
unit.name <- "prediction.difficulty" #Input chosen unit name as it appears in the data set
get_similarity(unit.name, D.SIM)
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of units
D.SIM <- lsa::cosine(D2) #This command generates the cosine similarity values as a new matrix.
unit.name <- "prediction.difficulty" #Input chosen unit name as it appears in the data set
get_similarity(unit.name, D.SIM)
rm(list = ls())
I1 <- read.csv("interest.csv")
D1 <- read.csv("difficulty.csv")
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
library(dplyr)
library(tidyr)
I2 <- unite(I1, "name", first,last, sep = " ")#combine names
I2 <- distinct(I2,name, .keep_all= TRUE)#remove duplicate students
rownames(I2) <- I2$name
I2$name <- NULL
I2 <- as.matrix(I2)
#First let's transpose the matrix so that multiplication occurs by students rather than units.
#Look at your data, missing values are coded with zero not NA. Investigate cosine similarity and decide whether your missing values should be coded with zeros or NAs. Explain your choice.
I2 <- t(I2)
#Then we can generate the cosine similarity values for each pair of students
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
I.SIM <- cosine(I2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
diag(I.SIM) <- NA #Since each student will be most similar to themselves we want to remove that information
my.name <- "Yiwen Ma" #Input your name as it appears in the data set
head(rownames(I.SIM[order(I.SIM[my.name,], decreasing = TRUE),]), n = 3) #This code orders the column of the matrix corresponding to your name according to similarity and returns the top two UNI ids for the students who's interests are most similar to yours
D.SIM <- cosine(D2)
library(tidyr)
library(lsa)
I3 <- gather(I1,unit,interest, 2:7)
D3 <- gather(D1, name, difficulty)
C1 <- data.frame(I3$name, I3$unit, I3$interest, D3$difficulty)
D.SIM <- cosine(D2)
I1 <- read.csv("interest.csv")
D1 <- read.csv("difficulty.csv")
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
library(dplyr)
library(tidyr)
I2 <- unite(I1, "name", first,last, sep = " ")#combine names
I2 <- distinct(I2,name, .keep_all= TRUE)#remove duplicate students
rownames(I2) <- I2$name
I2$name <- NULL
I2 <- as.matrix(I2)
#First let's transpose the matrix so that multiplication occurs by students rather than units.
#Look at your data, missing values are coded with zero not NA. Investigate cosine similarity and decide whether your missing values should be coded with zeros or NAs. Explain your choice.
I2 <- t(I2)
#Then we can generate the cosine similarity values for each pair of students
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
I.SIM <- cosine(I2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
diag(I.SIM) <- NA #Since each student will be most similar to themselves we want to remove that information
my.name <- "Yiwen Ma" #Input your name as it appears in the data set
head(rownames(I.SIM[order(I.SIM[my.name,], decreasing = TRUE),]), n = 3) #This code orders the column of the matrix corresponding to your name according to similarity and returns the top two UNI ids for the students who's interests are most similar to yours
D.SIM <- cosine(D2)
View(I3)
View(I3)
View(D3)
C1 <- data.frame(I3$name, I3$unit, I3$interest, D3$difficulty)
rm(list = ls())
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
interest <- read.csv('interest.csv')
difficulty <- read.csv('difficulty.csv')
#Data cleaning
clean_similarity <- function(df) {
#Unite
df <- unite(df, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df <- df %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
#Dealing with NAs - use the mean (see below)
if (anyNA(df)) {
means <- map(df, mean, na.rm = TRUE)
df <- replace_na(df, means)
}
df
}
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df, transpose = FALSE) {
#tibble::column_to_rownames() to preserve names
df1 <- column_to_rownames(df, var = "name") %>% as.matrix()
if (transpose == TRUE) {
df1 <- t(df1)
}
return(df1)
}
#Clean interest df
interest2 <- clean_similarity(interest)
#Make interest similarity matrix input
#let's transpose the matrix so that multiplication occurs by students rather than units.
I2 <- make_similarity_matrix_input(interest2, transpose = TRUE)
#Then we can generate the cosine similarity values for each pair of students
I.SIM <- lsa::cosine(I2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
get_similarity <- function(entry, sim_matrix) {
diag(sim_matrix) <- NA #Since each entry will be most similar to itself (cosine similarity of 1) we want to remove that information
#This code orders the column of the matrix corresponding to the given entry according to similarity and returns the top 5 other entries for most similar to the given entry.
head(rownames(sim_matrix[order(sim_matrix[entry,], decreasing = TRUE),]), n = 5)
}
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
get_similarity(my.name, I.SIM)
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of units
D.SIM <- lsa::cosine(D2) #This command generates the cosine similarity values as a new matrix.
unit.name <- "prediction.difficulty" #Input chosen unit name as it appears in the data set
get_similarity(unit.name, D.SIM)
difficulty2
interest2
