diag(I.SIM) <- NA #Since each student will be most similar to themselves we want to remove that information
View(I.SIM)
View(I.SIM)
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
head(rownames(I.SIM[order(I.SIM[my.name,], decreasing = TRUE),]), n = 5) #This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
View(difficulty)
View(difficulty)
#Data cleaning
clean_similarity <- function(df) {
#Unite
df2 <- unite(interest, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df2 <- df2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
df2
}
interest_test <- clean_similarity(interest)
interest_test
#Data cleaning
clean_similarity <- function(df) {
#Unite
df2 <- unite(interest, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df2 <- df2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
df2
}
#Call function on interest
interest2 <- clean_similarity(interest)
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
#rownames() to preserve names
#rownames
interest2 <- column_to_rownames(interest2, var = "name")
interest2 <- as.matrix(interest2)
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
#rownames() to preserve names
#rownames
make_similarity_matrix <- function(df) {
column_to_rownames(df, var = "name") %>% as.matrix()
}
interest2 <- make_similarity_matrix(interest2)
#Data cleaning
clean_similarity <- function(df) {
#Unite
df2 <- unite(interest, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df2 <- df2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
df2
}
#Call function on interest
interest2 <- clean_similarity(interest)
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
#rownames() to preserve names
#rownames
make_similarity_matrix <- function(df) {
column_to_rownames(df, var = "name") %>% as.matrix()
}
interest2 <- make_similarity_matrix(interest2)
View(interest2)
View(interest2)
?column_to_rownames
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df) {
#tibble::column_to_rownames() to preserve names
column_to_rownames(df, var = "name") %>% as.matrix() %>% t()
}
#Call function on interest2
I2 <- make_similarity_matrix_input(interest2)
#Data cleaning
clean_similarity <- function(df) {
#Unite
df2 <- unite(interest, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df2 <- df2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
df2
}
#Call function on interest
interest2 <- clean_similarity(interest)
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df) {
#tibble::column_to_rownames() to preserve names
column_to_rownames(df, var = "name") %>% as.matrix() %>% t()
}
#Call function on interest2
I2 <- make_similarity_matrix_input(interest2)
interest <- read.csv('interest.csv')
difficulty <- read.csv('difficulty.csv')
#Data cleaning
clean_similarity <- function(df) {
#Unite
df2 <- unite(interest, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df2 <- df2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
df2
}
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df) {
#tibble::column_to_rownames() to preserve names
#let's transpose the matrix so that multiplication occurs by students rather than units.
column_to_rownames(df, var = "name") %>% as.matrix() %>% t()
}
#Clean interest df
interest2 <- clean_similarity(interest)
#Make interest similarity matrix input
I2 <- make_similarity_matrix_input(interest2)
#Then we can generate the cosine similarity values for each pair of students
I.SIM <- lsa::cosine(I2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
diag(I.SIM) <- NA #Since each student will be most similar to themselves we want to remove that information
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
head(rownames(I.SIM[order(I.SIM[my.name,], decreasing = TRUE),]), n = 5) #This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
interest <- read.csv('interest.csv')
difficulty <- read.csv('difficulty.csv')
#Data cleaning
clean_similarity <- function(df) {
#Unite
df2 <- unite(interest, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df2 <- df2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
df2
}
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df, transpose = FALSE) {
#tibble::column_to_rownames() to preserve names
df1 <- column_to_rownames(df, var = "name") %>% as.matrix()
if (transpose == TRUE) {
df1 <- t(df1)
}
return(df1)
}
#Clean interest df
interest2 <- clean_similarity(interest)
#Make interest similarity matrix input
#let's transpose the matrix so that multiplication occurs by students rather than units.
I2 <- make_similarity_matrix_input(interest2, transpose = TRUE)
View(I2)
View(I2)
#Clean interest df
interest2 <- clean_similarity(interest)
#Make interest similarity matrix input
#let's transpose the matrix so that multiplication occurs by students rather than units.
I2 <- make_similarity_matrix_input(interest2, transpose = TRUE)
#Clean interest df
interest2 <- clean_similarity(interest)
#Make interest similarity matrix input
#let's transpose the matrix so that multiplication occurs by students rather than units.
I2 <- make_similarity_matrix_input(interest2, transpose = TRUE)
#Then we can generate the cosine similarity values for each pair of students
I.SIM <- lsa::cosine(I2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
diag(I.SIM) <- NA #Since each student will be most similar to themselves we want to remove that information
View(I.SIM)
View(I.SIM)
View(I.SIM)
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
head(rownames(I.SIM[order(I.SIM[my.name,], decreasing = TRUE),]), n = 5) #This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (it's column-wise).
I2 <- make_similarity_matrix_input(interest2, transpose = FALSE)
View(I2)
View(I2)
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (it's column-wise).
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
View(D2)
View(D2)
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of students
D.SIM <- lsa::cosine(D2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
diag(D.SIM) <- NA #Since each student will be most similar to themselves we want to remove that information
View(D.SIM)
View(D.SIM)
View(difficulty)
View(difficulty)
unit.name <- "prediction.difficulty" #Input your name as it appears in the data set
head(rownames(D.SIM[order(D.SIM[unit.name,], decreasing = TRUE),]), n = 5) #This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
unit.name <- "prediction.difficulty" #Input your name as it appears in the data set
head(rownames(D.SIM[order(D.SIM[unit.name,], decreasing = TRUE),]), n = 5) #This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
unit.name <- "prediction.difficulty" #Input your name as it appears in the data set
head(rownames(D.SIM[order(D.SIM[unit.name,], decreasing = TRUE),]))#This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
unit.name <- "prediction.difficulty" #Input your name as it appears in the data set
head(rownames(D.SIM[order(D.SIM[unit.name, :], decreasing = TRUE),]))#This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
View(D.SIM)
View(D.SIM)
unit.name <- "prediction.difficulty" #Input your name as it appears in the data set
head(rownames(D.SIM[order(D.SIM[unit.name, ], decreasing = TRUE),]))#This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
#Data cleaning
clean_similarity <- function(df) {
#Unite
df2 <- unite(df, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df2 <- df2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
df2
}
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df, transpose = FALSE) {
#tibble::column_to_rownames() to preserve names
df1 <- column_to_rownames(df, var = "name") %>% as.matrix()
if (transpose == TRUE) {
df1 <- t(df1)
}
return(df1)
}
#Clean interest df
interest2 <- clean_similarity(interest)
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
interest <- read.csv('interest.csv')
difficulty <- read.csv('difficulty.csv')
#Data cleaning
clean_similarity <- function(df) {
#Unite
df2 <- unite(df, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df2 %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df2 <- df2 %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
df2
}
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df, transpose = FALSE) {
#tibble::column_to_rownames() to preserve names
df1 <- column_to_rownames(df, var = "name") %>% as.matrix()
if (transpose == TRUE) {
df1 <- t(df1)
}
return(df1)
}
#Clean interest df
interest2 <- clean_similarity(interest)
#Make interest similarity matrix input
#let's transpose the matrix so that multiplication occurs by students rather than units.
I2 <- make_similarity_matrix_input(interest2, transpose = TRUE)
#Then we can generate the cosine similarity values for each pair of students
I.SIM <- lsa::cosine(I2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
diag(I.SIM) <- NA #Since each student will be most similar to themselves we want to remove that information
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
head(rownames(I.SIM[order(I.SIM[my.name,], decreasing = TRUE),]), n = 5) #This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of students
D.SIM <- lsa::cosine(D2) #This command generates the cosine similarity values as a new matrix.
diag(D.SIM) <- NA #Since each unit will be exactly similar to themselves (cosine similarity of 1) we want to remove that information
View(D.SIM)
View(D.SIM)
unit.name <- "prediction.difficulty" #Input chosen unit name as it appears in the data set
head(rownames(D.SIM[order(D.SIM[unit.name, ], decreasing = TRUE),]), n = 5)#This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
View(difficulty)
View(difficulty)
View(D.SIM)
View(D.SIM)
unit.name <- "prediction.difficulty" #Input chosen unit name as it appears in the data set
head(rownames(D.SIM[order(D.SIM[unit.name, ], decreasing = TRUE),]), n = 5)#This code orders the column of the matrix corresponding to your UNI according to similarity and returns the top 5 UNI ids for the students who's interests are most similar to yours
View(difficulty)
View(difficulty)
View(difficulty)
View(difficulty)
View(D.SIM)
View(D.SIM)
View(D2)
View(D2)
mean(D2)
View(D2)
View(D2)
mean(D2[:, 1])
mean(D2[, 1])
mean(difficulty$prediction.difficulty)
D2[, 1]
mean(difficulty2$prediction.difficulty)
map(difficulty2, mean, na.rm = TRUE)
map_dbl(difficulty2, mean, na.rm = TRUE)
#install.packages("lsa") #You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
interest <- read.csv('interest.csv')
difficulty <- read.csv('difficulty.csv')
#Data cleaning
clean_similarity <- function(df) {
#Unite
df <- unite(df, col = 'name', .data$first, .data$last)
#Use distinct()/unique() to get distinct values - there are name duplicates
#Finding and printing duplicates
df %>% group_by(.data$name) %>% summarise(count = n()) %>% filter(`count` > 1)
#Dealing with duplicates - average duplicates
df <- df %>% group_by(.data$name) %>% summarise_all(.funs = mean, na.rm = TRUE)
#Dealing with NAs - use the mean (see below)
if (anyNA(df)) {
means <- map(df, mean, na.rm = TRUE)
df <- replace_na(df, means)
}
df
}
#HINT: First you will need to remove the student ids as matrices can only contain one data type. You will then need to rename your row names with the student ids.
make_similarity_matrix_input <- function(df, transpose = FALSE) {
#tibble::column_to_rownames() to preserve names
df1 <- column_to_rownames(df, var = "name") %>% as.matrix()
if (transpose == TRUE) {
df1 <- t(df1)
}
return(df1)
}
#Clean interest df
interest2 <- clean_similarity(interest)
#Make interest similarity matrix input
#let's transpose the matrix so that multiplication occurs by students rather than units.
I2 <- make_similarity_matrix_input(interest2, transpose = TRUE)
#Then we can generate the cosine similarity values for each pair of students
I.SIM <- lsa::cosine(I2) #This command generates the cosine similarity values as a new matrix. Click on I.SIM in the Global Environment pane to see what it looks like.
get_similarity <- function(entry, sim_matrix) {
diag(sim_matrix) <- NA #Since each entry will be most similar to itself (cosine similarity of 1) we want to remove that information
#This code orders the column of the matrix corresponding to the given entry according to similarity and returns the top 5 other entries for most similar to the given entry.
head(rownames(sim_matrix[order(sim_matrix[entry,], decreasing = TRUE),]), n = 5)
}
my.name <- "Timothy_Lee" #Input your name as it appears in the data set
get_similarity(my.name, I.SIM)
#Clean difficulty df
difficulty2 <- clean_similarity(difficulty)
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
D2 <- make_similarity_matrix_input(difficulty2, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of units
D.SIM <- lsa::cosine(D2) #This command generates the cosine similarity values as a new matrix.
unit.name <- "prediction.difficulty" #Input chosen unit name as it appears in the data set
get_similarity(unit.name, D.SIM)
#From what I gather from the solution (a lifesaver, wouldn't have figured it out otherwise) - run PCA with interest and difficulty on different axes and take PC1 as the composite measure.
pivot_longer(difficulty2, cols = 2:8)
#From what I gather from the solution (a lifesaver, wouldn't have figured it out otherwise) - run PCA with interest and difficulty on different axes and take PC1 as the composite measure.
pivot_longer(difficulty2, cols = 2:8, names_to = 'xx')
#From what I gather from the solution (a lifesaver, wouldn't have figured it out otherwise) - run PCA with interest and difficulty on different axes and take PC1 as the composite measure.
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = 'unit')
difficulty_long <- pivot_longer(difficulty2, cols = 2:8, names_to = 'unit')
interest_diffculty <- full_join(interest_long, difficulty_long, by = c('name', 'unit'))
View(interest_diffculty)
View(interest_diffculty)
interest_diffculty <- full_join(interest_long, difficulty_long, by = 'name')
View(interest_diffculty)
View(interest_diffculty)
rm(interest_difficulty)
rm(interest_diffculty)
interest_diffculty <- full_join(interest_long, difficulty_long, by = 'name')
View(interest_diffculty)
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = 'unit', values_to = "interest")
View(interest_long)
View(interest_long)
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit)
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit, into = c("aaa", "bbb"))
View(interest_long)
View(interest_long)
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit, into = c("aaa", "bbb"), sep = ".")
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit, into = c("aaa", "bbb"), sep = "\\.")
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit, into = c("aaa", NA), sep = "\\.")
#From what I gather from the solution (a lifesaver, wouldn't have figured it out otherwise) - run PCA with interest and difficulty on different axes and take PC1 as the composite measure.
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit, into = c("unit", NA), sep = "\\.")
difficulty_long <- pivot_longer(difficulty2, cols = 2:8, names_to = "unit", values_to = "difficulty") %>%
separate(col = unit, into = c("unit", NA), sep = "\\.")
interest_diffculty <- full_join(interest_long, difficulty_long, by = "name")
View(interest_diffculty)
View(interest_diffculty)
#From what I gather from the solution (a lifesaver, wouldn't have figured it out otherwise) - run PCA with interest and difficulty on different axes and take PC1 as the composite measure.
interest_long <- pivot_longer(interest2, cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit, into = c("unit", NA), sep = "\\.")
difficulty_long <- pivot_longer(difficulty2, cols = 2:8, names_to = "unit", values_to = "difficulty") %>%
separate(col = unit, into = c("unit", NA), sep = "\\.")
interest_diffculty <- full_join(interest_long, difficulty_long, by = c("name", "unit"))
View(interest_diffculty)
View(interest_diffculty)
View(difficulty2)
View(difficulty2)
table(difficulty_long)
colnames(difficulty)
colnames(interest)
colnames(difficulty2)
difficulty_long <- difficulty2 %>% select(sna.difficulty = Plsna.difficulty) #%>%
View(difficulty_long)
View(difficulty_long)
difficulty_long <- difficulty2 %>% rename(sna.difficulty = Plsna.difficulty) #%>%
View(difficulty_long)
View(difficulty_long)
#From what I gather from the solution (a lifesaver, wouldn't have figured it out otherwise) - run PCA with interest and difficulty on different axes and take PC1 as the composite measure.
interest_long <- interest2 %>% pivot_longer(cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit, into = c("unit", NA), sep = "\\.")
difficulty_long <- difficulty2 %>% rename(sna.difficulty = Plsna.difficulty) %>%
pivot_longer(cols = 2:8, names_to = "unit", values_to = "difficulty") %>%
separate(col = unit, into = c("unit", NA), sep = "\\.")
interest_diffculty <- full_join(interest_long, difficulty_long, by = c("name", "unit"))
View(interest_diffculty)
View(interest_diffculty)
#From what I gather from the solution (a lifesaver, wouldn't have figured it out otherwise) - run PCA with interest and difficulty on different axes and take PC1 as the composite measure.
interest_long <- interest2 %>% pivot_longer(cols = 2:8, names_to = "unit", values_to = "interest") %>%
separate(col = unit, into = c("unit", NA), sep = "\\.")
difficulty_long <- difficulty2 %>% rename(sna.difficulty = .data$Plsna.difficulty) %>%
pivot_longer(cols = 2:8, names_to = "unit", values_to = "difficulty") %>%
separate(col = unit, into = c("unit", NA), sep = "\\.")
interest_diffculty <- full_join(interest_long, difficulty_long, by = c("name", "unit"))
View(interest_diffculty)
View(interest_diffculty)
interest_diffculty2 <- select(interest_diffculty, interest, difficulty)
View(interest_diffculty2)
View(interest_diffculty2)
pca <- prcomp(interest_difficulty2)
pca <- prcomp(interest_diffculty2)
View(pca)
View(pca)
biplot.princomp(pca)
biplot.princomp(pca)
stats::biplot.princomp(pca)
stats::biplot(pca)
library(factoextra)
fviz_eig(pca)
fviz_pca_var(pca)
pc1 <- pca$x[:, 1]
pc1 <- pca$x[[:, 1]]
pc1 <- pca$x[[, 1]]
pc1 <- pca$x[[, 1]]
pc1 <- pca$x[, 1]
pc1
View(pca$x)
interest_difficulty3 <- bind_cols(interest_difficulty2, pc1)
interest_difficulty3 <- bind_cols(interest_diffculty2, pc1)
interest_difficulty3 <- bind_cols(interest_diffculty2, pc1)
interest_difficulty3 <- data.frame(interest_diffculty$name, interest_diffculty$unit, pc1)
View(interest_difficulty3)
View(interest_difficulty3)
interest_difficulty_sim <- pivot_wider(interest_difficulty3, id_cols = "name")
View(interest_difficulty3)
View(interest_difficulty3)
#Regenerate the input for the similarity matrix
interest_difficulty3 <- data.frame(name = interest_diffculty$name, unit = interest_diffculty$unit, pc1)
interest_difficulty_sim <- pivot_wider(interest_difficulty3, id_cols = "name", names_from = "unit" values_from = "pc1")
interest_difficulty_sim <- pivot_wider(interest_difficulty3, id_cols = "name", names_from = "unit", values_from = "pc1")
View(interest_difficulty_sim)
View(interest_difficulty_sim)
View(interest_difficulty_sim)
View(interest_difficulty_sim)
#Clean difficulty df - not necessary, since the interest_difficulty matrix was already built from cleaned DFs without
#duplicates and NAs
#Make interest similarity matrix input
#Don't transpose the matrix so that multiplication occurs by units rather than by students (column-wise
#comparison of units along 'student dimensions').
ID2 <- make_similarity_matrix_input(interest_difficulty_sim, transpose = FALSE)
#Then we can generate the cosine similarity values for each pair of units
ID.SIM <- lsa::cosine(ID2) #This command generates the cosine similarity values as a new matrix.
unit.name <- "prediction" #Input chosen unit name as it appears in the data set
get_similarity(unit.name, ID.SIM)
install.packages("styler")
styler:::set_style_transformers()
styler:::style_active_file()
lintr::lint_package()
lintr::lint_package()
library(lintr)
lint?
lint?
/
?lint
lint("collaborative-filter.Rmd")
setwd("C:/Users/Timothy/Google Drive/TC Stuff/Analytics/HUDK 4050 & 4051 - Learning Analytics/Projects/Recommender Systems/recommender-systems")
lint("collaborative-filter.Rmd")
#install.packages("lsa")
#You will need to install the lsa package to access the cosine command.
library(lsa)
library(tidyverse)
#To visualise PCA results
library(factoextra)
lint("collaborative-filter.Rmd")
lint("collaborative-filter.Rmd")
lint("collaborative-filter.Rmd")
